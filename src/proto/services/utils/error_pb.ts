// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file services/utils/error.proto (package services.utils, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message services.utils.ErrorMessage
 */
export class ErrorMessage extends Message<ErrorMessage> {
  /**
   * @generated from oneof services.utils.ErrorMessage.error
   */
  error: {
    /**
     * @generated from field: string message = 1;
     */
    value: string;
    case: "message";
  } | {
    /**
     * @generated from field: google.protobuf.Any null_error = 2;
     */
    value: Any;
    case: "nullError";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ErrorMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "services.utils.ErrorMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "error" },
    { no: 2, name: "null_error", kind: "message", T: Any, oneof: "error" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ErrorMessage {
    return new ErrorMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ErrorMessage {
    return new ErrorMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ErrorMessage {
    return new ErrorMessage().fromJsonString(jsonString, options);
  }

  static equals(a: ErrorMessage | PlainMessage<ErrorMessage> | undefined, b: ErrorMessage | PlainMessage<ErrorMessage> | undefined): boolean {
    return proto3.util.equals(ErrorMessage, a, b);
  }
}

